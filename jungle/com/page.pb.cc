// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "page.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jungle {
namespace com {
namespace page {

namespace {

const ::google::protobuf::Descriptor* CommonID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommonID_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CommonID_field_t_descriptor_ = NULL;
const ::google::protobuf::Descriptor* JobDescription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JobDescription_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* JobDescription_job_type_t_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LectureDescription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LectureDescription_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LectureDescription_lecture_type_t_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_page_2eproto() {
  protobuf_AddDesc_page_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "page.proto");
  GOOGLE_CHECK(file != NULL);
  CommonID_descriptor_ = file->message_type(0);
  static const int CommonID_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonID, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonID, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonID, field_),
  };
  CommonID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommonID_descriptor_,
      CommonID::default_instance_,
      CommonID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommonID));
  CommonID_field_t_descriptor_ = CommonID_descriptor_->enum_type(0);
  JobDescription_descriptor_ = file->message_type(1);
  static const int JobDescription_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobDescription, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobDescription, job_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobDescription, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobDescription, department_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobDescription, require_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobDescription, duty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobDescription, des_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobDescription, about_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobDescription, pub_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobDescription, expire_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobDescription, update_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobDescription, salary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobDescription, work_age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobDescription, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobDescription, head_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobDescription, contact_),
  };
  JobDescription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JobDescription_descriptor_,
      JobDescription::default_instance_,
      JobDescription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobDescription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobDescription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JobDescription));
  JobDescription_job_type_t_descriptor_ = JobDescription_descriptor_->enum_type(0);
  LectureDescription_descriptor_ = file->message_type(2);
  static const int LectureDescription_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LectureDescription, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LectureDescription, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LectureDescription, des_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LectureDescription, author_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LectureDescription, pub_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LectureDescription, update_tm_),
  };
  LectureDescription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LectureDescription_descriptor_,
      LectureDescription::default_instance_,
      LectureDescription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LectureDescription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LectureDescription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LectureDescription));
  LectureDescription_lecture_type_t_descriptor_ = LectureDescription_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_page_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommonID_descriptor_, &CommonID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JobDescription_descriptor_, &JobDescription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LectureDescription_descriptor_, &LectureDescription::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_page_2eproto() {
  delete CommonID::default_instance_;
  delete CommonID_reflection_;
  delete JobDescription::default_instance_;
  delete JobDescription_reflection_;
  delete LectureDescription::default_instance_;
  delete LectureDescription_reflection_;
}

void protobuf_AddDesc_page_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\npage.proto\022\017jungle.com.page\"r\n\010CommonI"
    "D\022\n\n\002id\030\001 \002(\004\022\013\n\003url\030\002 \002(\t\0220\n\005field\030\003 \002("
    "\0162!.jungle.com.page.CommonID.field_t\"\033\n\007"
    "field_t\022\010\n\004TECH\020\000\022\006\n\002PM\020\001\"\212\003\n\016JobDescrip"
    "tion\022%\n\002id\030\001 \002(\0132\031.jungle.com.page.Commo"
    "nID\022<\n\010job_type\030\002 \002(\0162*.jungle.com.page."
    "JobDescription.job_type_t\022\r\n\005title\030\003 \002(\t"
    "\022\022\n\ndepartment\030\004 \002(\t\022\017\n\007require\030\005 \003(\t\022\014\n"
    "\004duty\030\006 \003(\t\022\013\n\003des\030\007 \002(\t\022\r\n\005about\030\010 \002(\t\022"
    "\016\n\006pub_tm\030\t \002(\004\022\021\n\texpire_tm\030\n \002(\004\022\021\n\tup"
    "date_tm\030\013 \002(\004\022\016\n\006salary\030\014 \002(\005\022\020\n\010work_ag"
    "e\030\r \002(\005\022\020\n\010location\030\016 \002(\005\022\022\n\nhead_count\030"
    "\017 \001(\005\022\017\n\007contact\030\020 \001(\t\"&\n\njob_type_t\022\014\n\010"
    "FULLTIME\020\000\022\n\n\006INTERN\020\001\"\377\001\n\022LectureDescri"
    "ption\022%\n\002id\030\001 \002(\0132\031.jungle.com.page.Comm"
    "onID\022@\n\004type\030\002 \002(\01622.jungle.com.page.Lec"
    "tureDescription.lecture_type_t\022\013\n\003des\030\003 "
    "\002(\t\022\016\n\006author\030\004 \002(\t\022\016\n\006pub_tm\030\005 \002(\004\022\021\n\tu"
    "pdate_tm\030\006 \002(\004\"@\n\016lecture_type_t\022\010\n\004TEXT"
    "\020\000\022\007\n\003PPT\020\001\022\007\n\003PDF\020\002\022\007\n\003DOC\020\003\022\t\n\005VIDEO\020\004", 800);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "page.proto", &protobuf_RegisterTypes);
  CommonID::default_instance_ = new CommonID();
  JobDescription::default_instance_ = new JobDescription();
  LectureDescription::default_instance_ = new LectureDescription();
  CommonID::default_instance_->InitAsDefaultInstance();
  JobDescription::default_instance_->InitAsDefaultInstance();
  LectureDescription::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_page_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_page_2eproto {
  StaticDescriptorInitializer_page_2eproto() {
    protobuf_AddDesc_page_2eproto();
  }
} static_descriptor_initializer_page_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* CommonID_field_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonID_field_t_descriptor_;
}
bool CommonID_field_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CommonID_field_t CommonID::TECH;
const CommonID_field_t CommonID::PM;
const CommonID_field_t CommonID::field_t_MIN;
const CommonID_field_t CommonID::field_t_MAX;
const int CommonID::field_t_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CommonID::kIdFieldNumber;
const int CommonID::kUrlFieldNumber;
const int CommonID::kFieldFieldNumber;
#endif  // !_MSC_VER

CommonID::CommonID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommonID::InitAsDefaultInstance() {
}

CommonID::CommonID(const CommonID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommonID::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  field_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommonID::~CommonID() {
  SharedDtor();
}

void CommonID::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void CommonID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonID_descriptor_;
}

const CommonID& CommonID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_page_2eproto();  return *default_instance_;
}

CommonID* CommonID::default_instance_ = NULL;

CommonID* CommonID::New() const {
  return new CommonID;
}

void CommonID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
    field_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommonID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }
      
      // required string url = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_field;
        break;
      }
      
      // required .jungle.com.page.CommonID.field_t field = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_field:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jungle::com::page::CommonID_field_t_IsValid(value)) {
            set_field(static_cast< ::jungle::com::page::CommonID_field_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommonID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }
  
  // required string url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->url(), output);
  }
  
  // required .jungle.com.page.CommonID.field_t field = 3;
  if (has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->field(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommonID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }
  
  // required string url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }
  
  // required .jungle.com.page.CommonID.field_t field = 3;
  if (has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->field(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommonID::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }
    
    // required string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }
    
    // required .jungle.com.page.CommonID.field_t field = 3;
    if (has_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->field());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommonID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommonID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommonID::MergeFrom(const CommonID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_field()) {
      set_field(from.field());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommonID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonID::CopyFrom(const CommonID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void CommonID::Swap(CommonID* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(url_, other->url_);
    std::swap(field_, other->field_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommonID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommonID_descriptor_;
  metadata.reflection = CommonID_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* JobDescription_job_type_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JobDescription_job_type_t_descriptor_;
}
bool JobDescription_job_type_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const JobDescription_job_type_t JobDescription::FULLTIME;
const JobDescription_job_type_t JobDescription::INTERN;
const JobDescription_job_type_t JobDescription::job_type_t_MIN;
const JobDescription_job_type_t JobDescription::job_type_t_MAX;
const int JobDescription::job_type_t_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int JobDescription::kIdFieldNumber;
const int JobDescription::kJobTypeFieldNumber;
const int JobDescription::kTitleFieldNumber;
const int JobDescription::kDepartmentFieldNumber;
const int JobDescription::kRequireFieldNumber;
const int JobDescription::kDutyFieldNumber;
const int JobDescription::kDesFieldNumber;
const int JobDescription::kAboutFieldNumber;
const int JobDescription::kPubTmFieldNumber;
const int JobDescription::kExpireTmFieldNumber;
const int JobDescription::kUpdateTmFieldNumber;
const int JobDescription::kSalaryFieldNumber;
const int JobDescription::kWorkAgeFieldNumber;
const int JobDescription::kLocationFieldNumber;
const int JobDescription::kHeadCountFieldNumber;
const int JobDescription::kContactFieldNumber;
#endif  // !_MSC_VER

JobDescription::JobDescription()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JobDescription::InitAsDefaultInstance() {
  id_ = const_cast< ::jungle::com::page::CommonID*>(&::jungle::com::page::CommonID::default_instance());
}

JobDescription::JobDescription(const JobDescription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JobDescription::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  job_type_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  department_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  about_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pub_tm_ = GOOGLE_ULONGLONG(0);
  expire_tm_ = GOOGLE_ULONGLONG(0);
  update_tm_ = GOOGLE_ULONGLONG(0);
  salary_ = 0;
  work_age_ = 0;
  location_ = 0;
  head_count_ = 0;
  contact_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JobDescription::~JobDescription() {
  SharedDtor();
}

void JobDescription::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (department_ != &::google::protobuf::internal::kEmptyString) {
    delete department_;
  }
  if (des_ != &::google::protobuf::internal::kEmptyString) {
    delete des_;
  }
  if (about_ != &::google::protobuf::internal::kEmptyString) {
    delete about_;
  }
  if (contact_ != &::google::protobuf::internal::kEmptyString) {
    delete contact_;
  }
  if (this != default_instance_) {
    delete id_;
  }
}

void JobDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobDescription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JobDescription_descriptor_;
}

const JobDescription& JobDescription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_page_2eproto();  return *default_instance_;
}

JobDescription* JobDescription::default_instance_ = NULL;

JobDescription* JobDescription::New() const {
  return new JobDescription;
}

void JobDescription::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != NULL) id_->::jungle::com::page::CommonID::Clear();
    }
    job_type_ = 0;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_department()) {
      if (department_ != &::google::protobuf::internal::kEmptyString) {
        department_->clear();
      }
    }
    if (has_des()) {
      if (des_ != &::google::protobuf::internal::kEmptyString) {
        des_->clear();
      }
    }
    if (has_about()) {
      if (about_ != &::google::protobuf::internal::kEmptyString) {
        about_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    pub_tm_ = GOOGLE_ULONGLONG(0);
    expire_tm_ = GOOGLE_ULONGLONG(0);
    update_tm_ = GOOGLE_ULONGLONG(0);
    salary_ = 0;
    work_age_ = 0;
    location_ = 0;
    head_count_ = 0;
    if (has_contact()) {
      if (contact_ != &::google::protobuf::internal::kEmptyString) {
        contact_->clear();
      }
    }
  }
  require_.Clear();
  duty_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JobDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .jungle.com.page.CommonID id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_job_type;
        break;
      }
      
      // required .jungle.com.page.JobDescription.job_type_t job_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jungle::com::page::JobDescription_job_type_t_IsValid(value)) {
            set_job_type(static_cast< ::jungle::com::page::JobDescription_job_type_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }
      
      // required string title = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_department;
        break;
      }
      
      // required string department = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_department:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_department()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->department().data(), this->department().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_require;
        break;
      }
      
      // repeated string require = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_require:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_require()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->require(0).data(), this->require(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_require;
        if (input->ExpectTag(50)) goto parse_duty;
        break;
      }
      
      // repeated string duty = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_duty:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_duty()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->duty(0).data(), this->duty(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_duty;
        if (input->ExpectTag(58)) goto parse_des;
        break;
      }
      
      // required string des = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_des:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_des()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->des().data(), this->des().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_about;
        break;
      }
      
      // required string about = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_about:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_about()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->about().data(), this->about().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_pub_tm;
        break;
      }
      
      // required uint64 pub_tm = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pub_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pub_tm_)));
          set_has_pub_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_expire_tm;
        break;
      }
      
      // required uint64 expire_tm = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expire_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &expire_tm_)));
          set_has_expire_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_update_tm;
        break;
      }
      
      // required uint64 update_tm = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &update_tm_)));
          set_has_update_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_salary;
        break;
      }
      
      // required int32 salary = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_salary:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &salary_)));
          set_has_salary();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_work_age;
        break;
      }
      
      // required int32 work_age = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_work_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &work_age_)));
          set_has_work_age();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_location;
        break;
      }
      
      // required int32 location = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_location:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &location_)));
          set_has_location();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_head_count;
        break;
      }
      
      // optional int32 head_count = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &head_count_)));
          set_has_head_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_contact;
        break;
      }
      
      // optional string contact = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contact:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contact()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contact().data(), this->contact().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JobDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .jungle.com.page.CommonID id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }
  
  // required .jungle.com.page.JobDescription.job_type_t job_type = 2;
  if (has_job_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->job_type(), output);
  }
  
  // required string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->title(), output);
  }
  
  // required string department = 4;
  if (has_department()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->department().data(), this->department().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->department(), output);
  }
  
  // repeated string require = 5;
  for (int i = 0; i < this->require_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->require(i).data(), this->require(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->require(i), output);
  }
  
  // repeated string duty = 6;
  for (int i = 0; i < this->duty_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->duty(i).data(), this->duty(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->duty(i), output);
  }
  
  // required string des = 7;
  if (has_des()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->des().data(), this->des().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->des(), output);
  }
  
  // required string about = 8;
  if (has_about()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->about().data(), this->about().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->about(), output);
  }
  
  // required uint64 pub_tm = 9;
  if (has_pub_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->pub_tm(), output);
  }
  
  // required uint64 expire_tm = 10;
  if (has_expire_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->expire_tm(), output);
  }
  
  // required uint64 update_tm = 11;
  if (has_update_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->update_tm(), output);
  }
  
  // required int32 salary = 12;
  if (has_salary()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->salary(), output);
  }
  
  // required int32 work_age = 13;
  if (has_work_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->work_age(), output);
  }
  
  // required int32 location = 14;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->location(), output);
  }
  
  // optional int32 head_count = 15;
  if (has_head_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->head_count(), output);
  }
  
  // optional string contact = 16;
  if (has_contact()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contact().data(), this->contact().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->contact(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JobDescription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .jungle.com.page.CommonID id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }
  
  // required .jungle.com.page.JobDescription.job_type_t job_type = 2;
  if (has_job_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->job_type(), target);
  }
  
  // required string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }
  
  // required string department = 4;
  if (has_department()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->department().data(), this->department().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->department(), target);
  }
  
  // repeated string require = 5;
  for (int i = 0; i < this->require_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->require(i).data(), this->require(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->require(i), target);
  }
  
  // repeated string duty = 6;
  for (int i = 0; i < this->duty_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->duty(i).data(), this->duty(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->duty(i), target);
  }
  
  // required string des = 7;
  if (has_des()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->des().data(), this->des().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->des(), target);
  }
  
  // required string about = 8;
  if (has_about()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->about().data(), this->about().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->about(), target);
  }
  
  // required uint64 pub_tm = 9;
  if (has_pub_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->pub_tm(), target);
  }
  
  // required uint64 expire_tm = 10;
  if (has_expire_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->expire_tm(), target);
  }
  
  // required uint64 update_tm = 11;
  if (has_update_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->update_tm(), target);
  }
  
  // required int32 salary = 12;
  if (has_salary()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->salary(), target);
  }
  
  // required int32 work_age = 13;
  if (has_work_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->work_age(), target);
  }
  
  // required int32 location = 14;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->location(), target);
  }
  
  // optional int32 head_count = 15;
  if (has_head_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->head_count(), target);
  }
  
  // optional string contact = 16;
  if (has_contact()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contact().data(), this->contact().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->contact(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JobDescription::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .jungle.com.page.CommonID id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }
    
    // required .jungle.com.page.JobDescription.job_type_t job_type = 2;
    if (has_job_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->job_type());
    }
    
    // required string title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }
    
    // required string department = 4;
    if (has_department()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->department());
    }
    
    // required string des = 7;
    if (has_des()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->des());
    }
    
    // required string about = 8;
    if (has_about()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->about());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint64 pub_tm = 9;
    if (has_pub_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pub_tm());
    }
    
    // required uint64 expire_tm = 10;
    if (has_expire_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->expire_tm());
    }
    
    // required uint64 update_tm = 11;
    if (has_update_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->update_tm());
    }
    
    // required int32 salary = 12;
    if (has_salary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->salary());
    }
    
    // required int32 work_age = 13;
    if (has_work_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->work_age());
    }
    
    // required int32 location = 14;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->location());
    }
    
    // optional int32 head_count = 15;
    if (has_head_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->head_count());
    }
    
    // optional string contact = 16;
    if (has_contact()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contact());
    }
    
  }
  // repeated string require = 5;
  total_size += 1 * this->require_size();
  for (int i = 0; i < this->require_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->require(i));
  }
  
  // repeated string duty = 6;
  total_size += 1 * this->duty_size();
  for (int i = 0; i < this->duty_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->duty(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobDescription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JobDescription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JobDescription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JobDescription::MergeFrom(const JobDescription& from) {
  GOOGLE_CHECK_NE(&from, this);
  require_.MergeFrom(from.require_);
  duty_.MergeFrom(from.duty_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::jungle::com::page::CommonID::MergeFrom(from.id());
    }
    if (from.has_job_type()) {
      set_job_type(from.job_type());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_department()) {
      set_department(from.department());
    }
    if (from.has_des()) {
      set_des(from.des());
    }
    if (from.has_about()) {
      set_about(from.about());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pub_tm()) {
      set_pub_tm(from.pub_tm());
    }
    if (from.has_expire_tm()) {
      set_expire_tm(from.expire_tm());
    }
    if (from.has_update_tm()) {
      set_update_tm(from.update_tm());
    }
    if (from.has_salary()) {
      set_salary(from.salary());
    }
    if (from.has_work_age()) {
      set_work_age(from.work_age());
    }
    if (from.has_location()) {
      set_location(from.location());
    }
    if (from.has_head_count()) {
      set_head_count(from.head_count());
    }
    if (from.has_contact()) {
      set_contact(from.contact());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JobDescription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobDescription::CopyFrom(const JobDescription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobDescription::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003fcf) != 0x00003fcf) return false;
  
  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  return true;
}

void JobDescription::Swap(JobDescription* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(job_type_, other->job_type_);
    std::swap(title_, other->title_);
    std::swap(department_, other->department_);
    require_.Swap(&other->require_);
    duty_.Swap(&other->duty_);
    std::swap(des_, other->des_);
    std::swap(about_, other->about_);
    std::swap(pub_tm_, other->pub_tm_);
    std::swap(expire_tm_, other->expire_tm_);
    std::swap(update_tm_, other->update_tm_);
    std::swap(salary_, other->salary_);
    std::swap(work_age_, other->work_age_);
    std::swap(location_, other->location_);
    std::swap(head_count_, other->head_count_);
    std::swap(contact_, other->contact_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JobDescription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JobDescription_descriptor_;
  metadata.reflection = JobDescription_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LectureDescription_lecture_type_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LectureDescription_lecture_type_t_descriptor_;
}
bool LectureDescription_lecture_type_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LectureDescription_lecture_type_t LectureDescription::TEXT;
const LectureDescription_lecture_type_t LectureDescription::PPT;
const LectureDescription_lecture_type_t LectureDescription::PDF;
const LectureDescription_lecture_type_t LectureDescription::DOC;
const LectureDescription_lecture_type_t LectureDescription::VIDEO;
const LectureDescription_lecture_type_t LectureDescription::lecture_type_t_MIN;
const LectureDescription_lecture_type_t LectureDescription::lecture_type_t_MAX;
const int LectureDescription::lecture_type_t_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LectureDescription::kIdFieldNumber;
const int LectureDescription::kTypeFieldNumber;
const int LectureDescription::kDesFieldNumber;
const int LectureDescription::kAuthorFieldNumber;
const int LectureDescription::kPubTmFieldNumber;
const int LectureDescription::kUpdateTmFieldNumber;
#endif  // !_MSC_VER

LectureDescription::LectureDescription()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LectureDescription::InitAsDefaultInstance() {
  id_ = const_cast< ::jungle::com::page::CommonID*>(&::jungle::com::page::CommonID::default_instance());
}

LectureDescription::LectureDescription(const LectureDescription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LectureDescription::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  type_ = 0;
  des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  author_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pub_tm_ = GOOGLE_ULONGLONG(0);
  update_tm_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LectureDescription::~LectureDescription() {
  SharedDtor();
}

void LectureDescription::SharedDtor() {
  if (des_ != &::google::protobuf::internal::kEmptyString) {
    delete des_;
  }
  if (author_ != &::google::protobuf::internal::kEmptyString) {
    delete author_;
  }
  if (this != default_instance_) {
    delete id_;
  }
}

void LectureDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LectureDescription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LectureDescription_descriptor_;
}

const LectureDescription& LectureDescription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_page_2eproto();  return *default_instance_;
}

LectureDescription* LectureDescription::default_instance_ = NULL;

LectureDescription* LectureDescription::New() const {
  return new LectureDescription;
}

void LectureDescription::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != NULL) id_->::jungle::com::page::CommonID::Clear();
    }
    type_ = 0;
    if (has_des()) {
      if (des_ != &::google::protobuf::internal::kEmptyString) {
        des_->clear();
      }
    }
    if (has_author()) {
      if (author_ != &::google::protobuf::internal::kEmptyString) {
        author_->clear();
      }
    }
    pub_tm_ = GOOGLE_ULONGLONG(0);
    update_tm_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LectureDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .jungle.com.page.CommonID id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // required .jungle.com.page.LectureDescription.lecture_type_t type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jungle::com::page::LectureDescription_lecture_type_t_IsValid(value)) {
            set_type(static_cast< ::jungle::com::page::LectureDescription_lecture_type_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_des;
        break;
      }
      
      // required string des = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_des:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_des()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->des().data(), this->des().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_author;
        break;
      }
      
      // required string author = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_author:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_author()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->author().data(), this->author().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pub_tm;
        break;
      }
      
      // required uint64 pub_tm = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pub_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pub_tm_)));
          set_has_pub_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_update_tm;
        break;
      }
      
      // required uint64 update_tm = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &update_tm_)));
          set_has_update_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LectureDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .jungle.com.page.CommonID id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }
  
  // required .jungle.com.page.LectureDescription.lecture_type_t type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }
  
  // required string des = 3;
  if (has_des()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->des().data(), this->des().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->des(), output);
  }
  
  // required string author = 4;
  if (has_author()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->author().data(), this->author().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->author(), output);
  }
  
  // required uint64 pub_tm = 5;
  if (has_pub_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->pub_tm(), output);
  }
  
  // required uint64 update_tm = 6;
  if (has_update_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->update_tm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LectureDescription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .jungle.com.page.CommonID id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }
  
  // required .jungle.com.page.LectureDescription.lecture_type_t type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }
  
  // required string des = 3;
  if (has_des()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->des().data(), this->des().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->des(), target);
  }
  
  // required string author = 4;
  if (has_author()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->author().data(), this->author().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->author(), target);
  }
  
  // required uint64 pub_tm = 5;
  if (has_pub_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->pub_tm(), target);
  }
  
  // required uint64 update_tm = 6;
  if (has_update_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->update_tm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LectureDescription::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .jungle.com.page.CommonID id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }
    
    // required .jungle.com.page.LectureDescription.lecture_type_t type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // required string des = 3;
    if (has_des()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->des());
    }
    
    // required string author = 4;
    if (has_author()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->author());
    }
    
    // required uint64 pub_tm = 5;
    if (has_pub_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pub_tm());
    }
    
    // required uint64 update_tm = 6;
    if (has_update_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->update_tm());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LectureDescription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LectureDescription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LectureDescription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LectureDescription::MergeFrom(const LectureDescription& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::jungle::com::page::CommonID::MergeFrom(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_des()) {
      set_des(from.des());
    }
    if (from.has_author()) {
      set_author(from.author());
    }
    if (from.has_pub_tm()) {
      set_pub_tm(from.pub_tm());
    }
    if (from.has_update_tm()) {
      set_update_tm(from.update_tm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LectureDescription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LectureDescription::CopyFrom(const LectureDescription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LectureDescription::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  return true;
}

void LectureDescription::Swap(LectureDescription* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(des_, other->des_);
    std::swap(author_, other->author_);
    std::swap(pub_tm_, other->pub_tm_);
    std::swap(update_tm_, other->update_tm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LectureDescription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LectureDescription_descriptor_;
  metadata.reflection = LectureDescription_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace page
}  // namespace com
}  // namespace jungle

// @@protoc_insertion_point(global_scope)
