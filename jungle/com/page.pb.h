// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: page.proto

#ifndef PROTOBUF_page_2eproto__INCLUDED
#define PROTOBUF_page_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace jungle {
namespace com {
namespace page {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_page_2eproto();
void protobuf_AssignDesc_page_2eproto();
void protobuf_ShutdownFile_page_2eproto();

class CommonID;
class JobDescription;
class LectureDescription;

enum CommonID_field_t {
  CommonID_field_t_TECH = 0,
  CommonID_field_t_PM = 1
};
bool CommonID_field_t_IsValid(int value);
const CommonID_field_t CommonID_field_t_field_t_MIN = CommonID_field_t_TECH;
const CommonID_field_t CommonID_field_t_field_t_MAX = CommonID_field_t_PM;
const int CommonID_field_t_field_t_ARRAYSIZE = CommonID_field_t_field_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* CommonID_field_t_descriptor();
inline const ::std::string& CommonID_field_t_Name(CommonID_field_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommonID_field_t_descriptor(), value);
}
inline bool CommonID_field_t_Parse(
    const ::std::string& name, CommonID_field_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommonID_field_t>(
    CommonID_field_t_descriptor(), name, value);
}
enum JobDescription_job_type_t {
  JobDescription_job_type_t_FULLTIME = 0,
  JobDescription_job_type_t_INTERN = 1
};
bool JobDescription_job_type_t_IsValid(int value);
const JobDescription_job_type_t JobDescription_job_type_t_job_type_t_MIN = JobDescription_job_type_t_FULLTIME;
const JobDescription_job_type_t JobDescription_job_type_t_job_type_t_MAX = JobDescription_job_type_t_INTERN;
const int JobDescription_job_type_t_job_type_t_ARRAYSIZE = JobDescription_job_type_t_job_type_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* JobDescription_job_type_t_descriptor();
inline const ::std::string& JobDescription_job_type_t_Name(JobDescription_job_type_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    JobDescription_job_type_t_descriptor(), value);
}
inline bool JobDescription_job_type_t_Parse(
    const ::std::string& name, JobDescription_job_type_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<JobDescription_job_type_t>(
    JobDescription_job_type_t_descriptor(), name, value);
}
enum LectureDescription_lecture_type_t {
  LectureDescription_lecture_type_t_TEXT = 0,
  LectureDescription_lecture_type_t_PPT = 1,
  LectureDescription_lecture_type_t_PDF = 2,
  LectureDescription_lecture_type_t_DOC = 3,
  LectureDescription_lecture_type_t_VIDEO = 4
};
bool LectureDescription_lecture_type_t_IsValid(int value);
const LectureDescription_lecture_type_t LectureDescription_lecture_type_t_lecture_type_t_MIN = LectureDescription_lecture_type_t_TEXT;
const LectureDescription_lecture_type_t LectureDescription_lecture_type_t_lecture_type_t_MAX = LectureDescription_lecture_type_t_VIDEO;
const int LectureDescription_lecture_type_t_lecture_type_t_ARRAYSIZE = LectureDescription_lecture_type_t_lecture_type_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* LectureDescription_lecture_type_t_descriptor();
inline const ::std::string& LectureDescription_lecture_type_t_Name(LectureDescription_lecture_type_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    LectureDescription_lecture_type_t_descriptor(), value);
}
inline bool LectureDescription_lecture_type_t_Parse(
    const ::std::string& name, LectureDescription_lecture_type_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LectureDescription_lecture_type_t>(
    LectureDescription_lecture_type_t_descriptor(), name, value);
}
// ===================================================================

class CommonID : public ::google::protobuf::Message {
 public:
  CommonID();
  virtual ~CommonID();
  
  CommonID(const CommonID& from);
  
  inline CommonID& operator=(const CommonID& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommonID& default_instance();
  
  void Swap(CommonID* other);
  
  // implements Message ----------------------------------------------
  
  CommonID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommonID& from);
  void MergeFrom(const CommonID& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CommonID_field_t field_t;
  static const field_t TECH = CommonID_field_t_TECH;
  static const field_t PM = CommonID_field_t_PM;
  static inline bool field_t_IsValid(int value) {
    return CommonID_field_t_IsValid(value);
  }
  static const field_t field_t_MIN =
    CommonID_field_t_field_t_MIN;
  static const field_t field_t_MAX =
    CommonID_field_t_field_t_MAX;
  static const int field_t_ARRAYSIZE =
    CommonID_field_t_field_t_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  field_t_descriptor() {
    return CommonID_field_t_descriptor();
  }
  static inline const ::std::string& field_t_Name(field_t value) {
    return CommonID_field_t_Name(value);
  }
  static inline bool field_t_Parse(const ::std::string& name,
      field_t* value) {
    return CommonID_field_t_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);
  
  // required string url = 2;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 2;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  
  // required .jungle.com.page.CommonID.field_t field = 3;
  inline bool has_field() const;
  inline void clear_field();
  static const int kFieldFieldNumber = 3;
  inline ::jungle::com::page::CommonID_field_t field() const;
  inline void set_field(::jungle::com::page::CommonID_field_t value);
  
  // @@protoc_insertion_point(class_scope:jungle.com.page.CommonID)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_field();
  inline void clear_has_field();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 id_;
  ::std::string* url_;
  int field_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_page_2eproto();
  friend void protobuf_AssignDesc_page_2eproto();
  friend void protobuf_ShutdownFile_page_2eproto();
  
  void InitAsDefaultInstance();
  static CommonID* default_instance_;
};
// -------------------------------------------------------------------

class JobDescription : public ::google::protobuf::Message {
 public:
  JobDescription();
  virtual ~JobDescription();
  
  JobDescription(const JobDescription& from);
  
  inline JobDescription& operator=(const JobDescription& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const JobDescription& default_instance();
  
  void Swap(JobDescription* other);
  
  // implements Message ----------------------------------------------
  
  JobDescription* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JobDescription& from);
  void MergeFrom(const JobDescription& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef JobDescription_job_type_t job_type_t;
  static const job_type_t FULLTIME = JobDescription_job_type_t_FULLTIME;
  static const job_type_t INTERN = JobDescription_job_type_t_INTERN;
  static inline bool job_type_t_IsValid(int value) {
    return JobDescription_job_type_t_IsValid(value);
  }
  static const job_type_t job_type_t_MIN =
    JobDescription_job_type_t_job_type_t_MIN;
  static const job_type_t job_type_t_MAX =
    JobDescription_job_type_t_job_type_t_MAX;
  static const int job_type_t_ARRAYSIZE =
    JobDescription_job_type_t_job_type_t_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  job_type_t_descriptor() {
    return JobDescription_job_type_t_descriptor();
  }
  static inline const ::std::string& job_type_t_Name(job_type_t value) {
    return JobDescription_job_type_t_Name(value);
  }
  static inline bool job_type_t_Parse(const ::std::string& name,
      job_type_t* value) {
    return JobDescription_job_type_t_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .jungle.com.page.CommonID id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::jungle::com::page::CommonID& id() const;
  inline ::jungle::com::page::CommonID* mutable_id();
  inline ::jungle::com::page::CommonID* release_id();
  
  // required .jungle.com.page.JobDescription.job_type_t job_type = 2;
  inline bool has_job_type() const;
  inline void clear_job_type();
  static const int kJobTypeFieldNumber = 2;
  inline ::jungle::com::page::JobDescription_job_type_t job_type() const;
  inline void set_job_type(::jungle::com::page::JobDescription_job_type_t value);
  
  // required string title = 3;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 3;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  
  // required string department = 4;
  inline bool has_department() const;
  inline void clear_department();
  static const int kDepartmentFieldNumber = 4;
  inline const ::std::string& department() const;
  inline void set_department(const ::std::string& value);
  inline void set_department(const char* value);
  inline void set_department(const char* value, size_t size);
  inline ::std::string* mutable_department();
  inline ::std::string* release_department();
  
  // repeated string require = 5;
  inline int require_size() const;
  inline void clear_require();
  static const int kRequireFieldNumber = 5;
  inline const ::std::string& require(int index) const;
  inline ::std::string* mutable_require(int index);
  inline void set_require(int index, const ::std::string& value);
  inline void set_require(int index, const char* value);
  inline void set_require(int index, const char* value, size_t size);
  inline ::std::string* add_require();
  inline void add_require(const ::std::string& value);
  inline void add_require(const char* value);
  inline void add_require(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& require() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_require();
  
  // repeated string duty = 6;
  inline int duty_size() const;
  inline void clear_duty();
  static const int kDutyFieldNumber = 6;
  inline const ::std::string& duty(int index) const;
  inline ::std::string* mutable_duty(int index);
  inline void set_duty(int index, const ::std::string& value);
  inline void set_duty(int index, const char* value);
  inline void set_duty(int index, const char* value, size_t size);
  inline ::std::string* add_duty();
  inline void add_duty(const ::std::string& value);
  inline void add_duty(const char* value);
  inline void add_duty(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& duty() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_duty();
  
  // required string des = 7;
  inline bool has_des() const;
  inline void clear_des();
  static const int kDesFieldNumber = 7;
  inline const ::std::string& des() const;
  inline void set_des(const ::std::string& value);
  inline void set_des(const char* value);
  inline void set_des(const char* value, size_t size);
  inline ::std::string* mutable_des();
  inline ::std::string* release_des();
  
  // required string about = 8;
  inline bool has_about() const;
  inline void clear_about();
  static const int kAboutFieldNumber = 8;
  inline const ::std::string& about() const;
  inline void set_about(const ::std::string& value);
  inline void set_about(const char* value);
  inline void set_about(const char* value, size_t size);
  inline ::std::string* mutable_about();
  inline ::std::string* release_about();
  
  // required uint64 pub_tm = 9;
  inline bool has_pub_tm() const;
  inline void clear_pub_tm();
  static const int kPubTmFieldNumber = 9;
  inline ::google::protobuf::uint64 pub_tm() const;
  inline void set_pub_tm(::google::protobuf::uint64 value);
  
  // required uint64 expire_tm = 10;
  inline bool has_expire_tm() const;
  inline void clear_expire_tm();
  static const int kExpireTmFieldNumber = 10;
  inline ::google::protobuf::uint64 expire_tm() const;
  inline void set_expire_tm(::google::protobuf::uint64 value);
  
  // required uint64 update_tm = 11;
  inline bool has_update_tm() const;
  inline void clear_update_tm();
  static const int kUpdateTmFieldNumber = 11;
  inline ::google::protobuf::uint64 update_tm() const;
  inline void set_update_tm(::google::protobuf::uint64 value);
  
  // required int32 salary = 12;
  inline bool has_salary() const;
  inline void clear_salary();
  static const int kSalaryFieldNumber = 12;
  inline ::google::protobuf::int32 salary() const;
  inline void set_salary(::google::protobuf::int32 value);
  
  // required int32 work_age = 13;
  inline bool has_work_age() const;
  inline void clear_work_age();
  static const int kWorkAgeFieldNumber = 13;
  inline ::google::protobuf::int32 work_age() const;
  inline void set_work_age(::google::protobuf::int32 value);
  
  // required int32 location = 14;
  inline bool has_location() const;
  inline void clear_location();
  static const int kLocationFieldNumber = 14;
  inline ::google::protobuf::int32 location() const;
  inline void set_location(::google::protobuf::int32 value);
  
  // optional int32 head_count = 15;
  inline bool has_head_count() const;
  inline void clear_head_count();
  static const int kHeadCountFieldNumber = 15;
  inline ::google::protobuf::int32 head_count() const;
  inline void set_head_count(::google::protobuf::int32 value);
  
  // optional string contact = 16;
  inline bool has_contact() const;
  inline void clear_contact();
  static const int kContactFieldNumber = 16;
  inline const ::std::string& contact() const;
  inline void set_contact(const ::std::string& value);
  inline void set_contact(const char* value);
  inline void set_contact(const char* value, size_t size);
  inline ::std::string* mutable_contact();
  inline ::std::string* release_contact();
  
  // @@protoc_insertion_point(class_scope:jungle.com.page.JobDescription)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_job_type();
  inline void clear_has_job_type();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_department();
  inline void clear_has_department();
  inline void set_has_des();
  inline void clear_has_des();
  inline void set_has_about();
  inline void clear_has_about();
  inline void set_has_pub_tm();
  inline void clear_has_pub_tm();
  inline void set_has_expire_tm();
  inline void clear_has_expire_tm();
  inline void set_has_update_tm();
  inline void clear_has_update_tm();
  inline void set_has_salary();
  inline void clear_has_salary();
  inline void set_has_work_age();
  inline void clear_has_work_age();
  inline void set_has_location();
  inline void clear_has_location();
  inline void set_has_head_count();
  inline void clear_has_head_count();
  inline void set_has_contact();
  inline void clear_has_contact();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::jungle::com::page::CommonID* id_;
  ::std::string* title_;
  ::std::string* department_;
  ::google::protobuf::RepeatedPtrField< ::std::string> require_;
  ::google::protobuf::RepeatedPtrField< ::std::string> duty_;
  ::std::string* des_;
  int job_type_;
  ::google::protobuf::int32 salary_;
  ::std::string* about_;
  ::google::protobuf::uint64 pub_tm_;
  ::google::protobuf::uint64 expire_tm_;
  ::google::protobuf::uint64 update_tm_;
  ::google::protobuf::int32 work_age_;
  ::google::protobuf::int32 location_;
  ::std::string* contact_;
  ::google::protobuf::int32 head_count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];
  
  friend void  protobuf_AddDesc_page_2eproto();
  friend void protobuf_AssignDesc_page_2eproto();
  friend void protobuf_ShutdownFile_page_2eproto();
  
  void InitAsDefaultInstance();
  static JobDescription* default_instance_;
};
// -------------------------------------------------------------------

class LectureDescription : public ::google::protobuf::Message {
 public:
  LectureDescription();
  virtual ~LectureDescription();
  
  LectureDescription(const LectureDescription& from);
  
  inline LectureDescription& operator=(const LectureDescription& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LectureDescription& default_instance();
  
  void Swap(LectureDescription* other);
  
  // implements Message ----------------------------------------------
  
  LectureDescription* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LectureDescription& from);
  void MergeFrom(const LectureDescription& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef LectureDescription_lecture_type_t lecture_type_t;
  static const lecture_type_t TEXT = LectureDescription_lecture_type_t_TEXT;
  static const lecture_type_t PPT = LectureDescription_lecture_type_t_PPT;
  static const lecture_type_t PDF = LectureDescription_lecture_type_t_PDF;
  static const lecture_type_t DOC = LectureDescription_lecture_type_t_DOC;
  static const lecture_type_t VIDEO = LectureDescription_lecture_type_t_VIDEO;
  static inline bool lecture_type_t_IsValid(int value) {
    return LectureDescription_lecture_type_t_IsValid(value);
  }
  static const lecture_type_t lecture_type_t_MIN =
    LectureDescription_lecture_type_t_lecture_type_t_MIN;
  static const lecture_type_t lecture_type_t_MAX =
    LectureDescription_lecture_type_t_lecture_type_t_MAX;
  static const int lecture_type_t_ARRAYSIZE =
    LectureDescription_lecture_type_t_lecture_type_t_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  lecture_type_t_descriptor() {
    return LectureDescription_lecture_type_t_descriptor();
  }
  static inline const ::std::string& lecture_type_t_Name(lecture_type_t value) {
    return LectureDescription_lecture_type_t_Name(value);
  }
  static inline bool lecture_type_t_Parse(const ::std::string& name,
      lecture_type_t* value) {
    return LectureDescription_lecture_type_t_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .jungle.com.page.CommonID id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::jungle::com::page::CommonID& id() const;
  inline ::jungle::com::page::CommonID* mutable_id();
  inline ::jungle::com::page::CommonID* release_id();
  
  // required .jungle.com.page.LectureDescription.lecture_type_t type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::jungle::com::page::LectureDescription_lecture_type_t type() const;
  inline void set_type(::jungle::com::page::LectureDescription_lecture_type_t value);
  
  // required string des = 3;
  inline bool has_des() const;
  inline void clear_des();
  static const int kDesFieldNumber = 3;
  inline const ::std::string& des() const;
  inline void set_des(const ::std::string& value);
  inline void set_des(const char* value);
  inline void set_des(const char* value, size_t size);
  inline ::std::string* mutable_des();
  inline ::std::string* release_des();
  
  // required string author = 4;
  inline bool has_author() const;
  inline void clear_author();
  static const int kAuthorFieldNumber = 4;
  inline const ::std::string& author() const;
  inline void set_author(const ::std::string& value);
  inline void set_author(const char* value);
  inline void set_author(const char* value, size_t size);
  inline ::std::string* mutable_author();
  inline ::std::string* release_author();
  
  // required uint64 pub_tm = 5;
  inline bool has_pub_tm() const;
  inline void clear_pub_tm();
  static const int kPubTmFieldNumber = 5;
  inline ::google::protobuf::uint64 pub_tm() const;
  inline void set_pub_tm(::google::protobuf::uint64 value);
  
  // required uint64 update_tm = 6;
  inline bool has_update_tm() const;
  inline void clear_update_tm();
  static const int kUpdateTmFieldNumber = 6;
  inline ::google::protobuf::uint64 update_tm() const;
  inline void set_update_tm(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:jungle.com.page.LectureDescription)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_des();
  inline void clear_has_des();
  inline void set_has_author();
  inline void clear_has_author();
  inline void set_has_pub_tm();
  inline void clear_has_pub_tm();
  inline void set_has_update_tm();
  inline void clear_has_update_tm();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::jungle::com::page::CommonID* id_;
  ::std::string* des_;
  ::std::string* author_;
  ::google::protobuf::uint64 pub_tm_;
  ::google::protobuf::uint64 update_tm_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_page_2eproto();
  friend void protobuf_AssignDesc_page_2eproto();
  friend void protobuf_ShutdownFile_page_2eproto();
  
  void InitAsDefaultInstance();
  static LectureDescription* default_instance_;
};
// ===================================================================


// ===================================================================

// CommonID

// required uint64 id = 1;
inline bool CommonID::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommonID::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommonID::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommonID::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 CommonID::id() const {
  return id_;
}
inline void CommonID::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// required string url = 2;
inline bool CommonID::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommonID::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommonID::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommonID::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& CommonID::url() const {
  return *url_;
}
inline void CommonID::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void CommonID::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void CommonID::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommonID::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* CommonID::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .jungle.com.page.CommonID.field_t field = 3;
inline bool CommonID::has_field() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommonID::set_has_field() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommonID::clear_has_field() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommonID::clear_field() {
  field_ = 0;
  clear_has_field();
}
inline ::jungle::com::page::CommonID_field_t CommonID::field() const {
  return static_cast< ::jungle::com::page::CommonID_field_t >(field_);
}
inline void CommonID::set_field(::jungle::com::page::CommonID_field_t value) {
  GOOGLE_DCHECK(::jungle::com::page::CommonID_field_t_IsValid(value));
  set_has_field();
  field_ = value;
}

// -------------------------------------------------------------------

// JobDescription

// required .jungle.com.page.CommonID id = 1;
inline bool JobDescription::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JobDescription::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JobDescription::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JobDescription::clear_id() {
  if (id_ != NULL) id_->::jungle::com::page::CommonID::Clear();
  clear_has_id();
}
inline const ::jungle::com::page::CommonID& JobDescription::id() const {
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::jungle::com::page::CommonID* JobDescription::mutable_id() {
  set_has_id();
  if (id_ == NULL) id_ = new ::jungle::com::page::CommonID;
  return id_;
}
inline ::jungle::com::page::CommonID* JobDescription::release_id() {
  clear_has_id();
  ::jungle::com::page::CommonID* temp = id_;
  id_ = NULL;
  return temp;
}

// required .jungle.com.page.JobDescription.job_type_t job_type = 2;
inline bool JobDescription::has_job_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JobDescription::set_has_job_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JobDescription::clear_has_job_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JobDescription::clear_job_type() {
  job_type_ = 0;
  clear_has_job_type();
}
inline ::jungle::com::page::JobDescription_job_type_t JobDescription::job_type() const {
  return static_cast< ::jungle::com::page::JobDescription_job_type_t >(job_type_);
}
inline void JobDescription::set_job_type(::jungle::com::page::JobDescription_job_type_t value) {
  GOOGLE_DCHECK(::jungle::com::page::JobDescription_job_type_t_IsValid(value));
  set_has_job_type();
  job_type_ = value;
}

// required string title = 3;
inline bool JobDescription::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JobDescription::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JobDescription::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JobDescription::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& JobDescription::title() const {
  return *title_;
}
inline void JobDescription::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void JobDescription::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void JobDescription::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JobDescription::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* JobDescription::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string department = 4;
inline bool JobDescription::has_department() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JobDescription::set_has_department() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JobDescription::clear_has_department() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JobDescription::clear_department() {
  if (department_ != &::google::protobuf::internal::kEmptyString) {
    department_->clear();
  }
  clear_has_department();
}
inline const ::std::string& JobDescription::department() const {
  return *department_;
}
inline void JobDescription::set_department(const ::std::string& value) {
  set_has_department();
  if (department_ == &::google::protobuf::internal::kEmptyString) {
    department_ = new ::std::string;
  }
  department_->assign(value);
}
inline void JobDescription::set_department(const char* value) {
  set_has_department();
  if (department_ == &::google::protobuf::internal::kEmptyString) {
    department_ = new ::std::string;
  }
  department_->assign(value);
}
inline void JobDescription::set_department(const char* value, size_t size) {
  set_has_department();
  if (department_ == &::google::protobuf::internal::kEmptyString) {
    department_ = new ::std::string;
  }
  department_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JobDescription::mutable_department() {
  set_has_department();
  if (department_ == &::google::protobuf::internal::kEmptyString) {
    department_ = new ::std::string;
  }
  return department_;
}
inline ::std::string* JobDescription::release_department() {
  clear_has_department();
  if (department_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = department_;
    department_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated string require = 5;
inline int JobDescription::require_size() const {
  return require_.size();
}
inline void JobDescription::clear_require() {
  require_.Clear();
}
inline const ::std::string& JobDescription::require(int index) const {
  return require_.Get(index);
}
inline ::std::string* JobDescription::mutable_require(int index) {
  return require_.Mutable(index);
}
inline void JobDescription::set_require(int index, const ::std::string& value) {
  require_.Mutable(index)->assign(value);
}
inline void JobDescription::set_require(int index, const char* value) {
  require_.Mutable(index)->assign(value);
}
inline void JobDescription::set_require(int index, const char* value, size_t size) {
  require_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JobDescription::add_require() {
  return require_.Add();
}
inline void JobDescription::add_require(const ::std::string& value) {
  require_.Add()->assign(value);
}
inline void JobDescription::add_require(const char* value) {
  require_.Add()->assign(value);
}
inline void JobDescription::add_require(const char* value, size_t size) {
  require_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
JobDescription::require() const {
  return require_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
JobDescription::mutable_require() {
  return &require_;
}

// repeated string duty = 6;
inline int JobDescription::duty_size() const {
  return duty_.size();
}
inline void JobDescription::clear_duty() {
  duty_.Clear();
}
inline const ::std::string& JobDescription::duty(int index) const {
  return duty_.Get(index);
}
inline ::std::string* JobDescription::mutable_duty(int index) {
  return duty_.Mutable(index);
}
inline void JobDescription::set_duty(int index, const ::std::string& value) {
  duty_.Mutable(index)->assign(value);
}
inline void JobDescription::set_duty(int index, const char* value) {
  duty_.Mutable(index)->assign(value);
}
inline void JobDescription::set_duty(int index, const char* value, size_t size) {
  duty_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JobDescription::add_duty() {
  return duty_.Add();
}
inline void JobDescription::add_duty(const ::std::string& value) {
  duty_.Add()->assign(value);
}
inline void JobDescription::add_duty(const char* value) {
  duty_.Add()->assign(value);
}
inline void JobDescription::add_duty(const char* value, size_t size) {
  duty_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
JobDescription::duty() const {
  return duty_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
JobDescription::mutable_duty() {
  return &duty_;
}

// required string des = 7;
inline bool JobDescription::has_des() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JobDescription::set_has_des() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JobDescription::clear_has_des() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JobDescription::clear_des() {
  if (des_ != &::google::protobuf::internal::kEmptyString) {
    des_->clear();
  }
  clear_has_des();
}
inline const ::std::string& JobDescription::des() const {
  return *des_;
}
inline void JobDescription::set_des(const ::std::string& value) {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  des_->assign(value);
}
inline void JobDescription::set_des(const char* value) {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  des_->assign(value);
}
inline void JobDescription::set_des(const char* value, size_t size) {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  des_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JobDescription::mutable_des() {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  return des_;
}
inline ::std::string* JobDescription::release_des() {
  clear_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = des_;
    des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string about = 8;
inline bool JobDescription::has_about() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JobDescription::set_has_about() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JobDescription::clear_has_about() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JobDescription::clear_about() {
  if (about_ != &::google::protobuf::internal::kEmptyString) {
    about_->clear();
  }
  clear_has_about();
}
inline const ::std::string& JobDescription::about() const {
  return *about_;
}
inline void JobDescription::set_about(const ::std::string& value) {
  set_has_about();
  if (about_ == &::google::protobuf::internal::kEmptyString) {
    about_ = new ::std::string;
  }
  about_->assign(value);
}
inline void JobDescription::set_about(const char* value) {
  set_has_about();
  if (about_ == &::google::protobuf::internal::kEmptyString) {
    about_ = new ::std::string;
  }
  about_->assign(value);
}
inline void JobDescription::set_about(const char* value, size_t size) {
  set_has_about();
  if (about_ == &::google::protobuf::internal::kEmptyString) {
    about_ = new ::std::string;
  }
  about_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JobDescription::mutable_about() {
  set_has_about();
  if (about_ == &::google::protobuf::internal::kEmptyString) {
    about_ = new ::std::string;
  }
  return about_;
}
inline ::std::string* JobDescription::release_about() {
  clear_has_about();
  if (about_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = about_;
    about_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint64 pub_tm = 9;
inline bool JobDescription::has_pub_tm() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JobDescription::set_has_pub_tm() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JobDescription::clear_has_pub_tm() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JobDescription::clear_pub_tm() {
  pub_tm_ = GOOGLE_ULONGLONG(0);
  clear_has_pub_tm();
}
inline ::google::protobuf::uint64 JobDescription::pub_tm() const {
  return pub_tm_;
}
inline void JobDescription::set_pub_tm(::google::protobuf::uint64 value) {
  set_has_pub_tm();
  pub_tm_ = value;
}

// required uint64 expire_tm = 10;
inline bool JobDescription::has_expire_tm() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JobDescription::set_has_expire_tm() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JobDescription::clear_has_expire_tm() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JobDescription::clear_expire_tm() {
  expire_tm_ = GOOGLE_ULONGLONG(0);
  clear_has_expire_tm();
}
inline ::google::protobuf::uint64 JobDescription::expire_tm() const {
  return expire_tm_;
}
inline void JobDescription::set_expire_tm(::google::protobuf::uint64 value) {
  set_has_expire_tm();
  expire_tm_ = value;
}

// required uint64 update_tm = 11;
inline bool JobDescription::has_update_tm() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JobDescription::set_has_update_tm() {
  _has_bits_[0] |= 0x00000400u;
}
inline void JobDescription::clear_has_update_tm() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void JobDescription::clear_update_tm() {
  update_tm_ = GOOGLE_ULONGLONG(0);
  clear_has_update_tm();
}
inline ::google::protobuf::uint64 JobDescription::update_tm() const {
  return update_tm_;
}
inline void JobDescription::set_update_tm(::google::protobuf::uint64 value) {
  set_has_update_tm();
  update_tm_ = value;
}

// required int32 salary = 12;
inline bool JobDescription::has_salary() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void JobDescription::set_has_salary() {
  _has_bits_[0] |= 0x00000800u;
}
inline void JobDescription::clear_has_salary() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void JobDescription::clear_salary() {
  salary_ = 0;
  clear_has_salary();
}
inline ::google::protobuf::int32 JobDescription::salary() const {
  return salary_;
}
inline void JobDescription::set_salary(::google::protobuf::int32 value) {
  set_has_salary();
  salary_ = value;
}

// required int32 work_age = 13;
inline bool JobDescription::has_work_age() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void JobDescription::set_has_work_age() {
  _has_bits_[0] |= 0x00001000u;
}
inline void JobDescription::clear_has_work_age() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void JobDescription::clear_work_age() {
  work_age_ = 0;
  clear_has_work_age();
}
inline ::google::protobuf::int32 JobDescription::work_age() const {
  return work_age_;
}
inline void JobDescription::set_work_age(::google::protobuf::int32 value) {
  set_has_work_age();
  work_age_ = value;
}

// required int32 location = 14;
inline bool JobDescription::has_location() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void JobDescription::set_has_location() {
  _has_bits_[0] |= 0x00002000u;
}
inline void JobDescription::clear_has_location() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void JobDescription::clear_location() {
  location_ = 0;
  clear_has_location();
}
inline ::google::protobuf::int32 JobDescription::location() const {
  return location_;
}
inline void JobDescription::set_location(::google::protobuf::int32 value) {
  set_has_location();
  location_ = value;
}

// optional int32 head_count = 15;
inline bool JobDescription::has_head_count() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void JobDescription::set_has_head_count() {
  _has_bits_[0] |= 0x00004000u;
}
inline void JobDescription::clear_has_head_count() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void JobDescription::clear_head_count() {
  head_count_ = 0;
  clear_has_head_count();
}
inline ::google::protobuf::int32 JobDescription::head_count() const {
  return head_count_;
}
inline void JobDescription::set_head_count(::google::protobuf::int32 value) {
  set_has_head_count();
  head_count_ = value;
}

// optional string contact = 16;
inline bool JobDescription::has_contact() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void JobDescription::set_has_contact() {
  _has_bits_[0] |= 0x00008000u;
}
inline void JobDescription::clear_has_contact() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void JobDescription::clear_contact() {
  if (contact_ != &::google::protobuf::internal::kEmptyString) {
    contact_->clear();
  }
  clear_has_contact();
}
inline const ::std::string& JobDescription::contact() const {
  return *contact_;
}
inline void JobDescription::set_contact(const ::std::string& value) {
  set_has_contact();
  if (contact_ == &::google::protobuf::internal::kEmptyString) {
    contact_ = new ::std::string;
  }
  contact_->assign(value);
}
inline void JobDescription::set_contact(const char* value) {
  set_has_contact();
  if (contact_ == &::google::protobuf::internal::kEmptyString) {
    contact_ = new ::std::string;
  }
  contact_->assign(value);
}
inline void JobDescription::set_contact(const char* value, size_t size) {
  set_has_contact();
  if (contact_ == &::google::protobuf::internal::kEmptyString) {
    contact_ = new ::std::string;
  }
  contact_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JobDescription::mutable_contact() {
  set_has_contact();
  if (contact_ == &::google::protobuf::internal::kEmptyString) {
    contact_ = new ::std::string;
  }
  return contact_;
}
inline ::std::string* JobDescription::release_contact() {
  clear_has_contact();
  if (contact_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = contact_;
    contact_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// LectureDescription

// required .jungle.com.page.CommonID id = 1;
inline bool LectureDescription::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LectureDescription::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LectureDescription::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LectureDescription::clear_id() {
  if (id_ != NULL) id_->::jungle::com::page::CommonID::Clear();
  clear_has_id();
}
inline const ::jungle::com::page::CommonID& LectureDescription::id() const {
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::jungle::com::page::CommonID* LectureDescription::mutable_id() {
  set_has_id();
  if (id_ == NULL) id_ = new ::jungle::com::page::CommonID;
  return id_;
}
inline ::jungle::com::page::CommonID* LectureDescription::release_id() {
  clear_has_id();
  ::jungle::com::page::CommonID* temp = id_;
  id_ = NULL;
  return temp;
}

// required .jungle.com.page.LectureDescription.lecture_type_t type = 2;
inline bool LectureDescription::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LectureDescription::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LectureDescription::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LectureDescription::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::jungle::com::page::LectureDescription_lecture_type_t LectureDescription::type() const {
  return static_cast< ::jungle::com::page::LectureDescription_lecture_type_t >(type_);
}
inline void LectureDescription::set_type(::jungle::com::page::LectureDescription_lecture_type_t value) {
  GOOGLE_DCHECK(::jungle::com::page::LectureDescription_lecture_type_t_IsValid(value));
  set_has_type();
  type_ = value;
}

// required string des = 3;
inline bool LectureDescription::has_des() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LectureDescription::set_has_des() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LectureDescription::clear_has_des() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LectureDescription::clear_des() {
  if (des_ != &::google::protobuf::internal::kEmptyString) {
    des_->clear();
  }
  clear_has_des();
}
inline const ::std::string& LectureDescription::des() const {
  return *des_;
}
inline void LectureDescription::set_des(const ::std::string& value) {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  des_->assign(value);
}
inline void LectureDescription::set_des(const char* value) {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  des_->assign(value);
}
inline void LectureDescription::set_des(const char* value, size_t size) {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  des_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LectureDescription::mutable_des() {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  return des_;
}
inline ::std::string* LectureDescription::release_des() {
  clear_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = des_;
    des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string author = 4;
inline bool LectureDescription::has_author() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LectureDescription::set_has_author() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LectureDescription::clear_has_author() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LectureDescription::clear_author() {
  if (author_ != &::google::protobuf::internal::kEmptyString) {
    author_->clear();
  }
  clear_has_author();
}
inline const ::std::string& LectureDescription::author() const {
  return *author_;
}
inline void LectureDescription::set_author(const ::std::string& value) {
  set_has_author();
  if (author_ == &::google::protobuf::internal::kEmptyString) {
    author_ = new ::std::string;
  }
  author_->assign(value);
}
inline void LectureDescription::set_author(const char* value) {
  set_has_author();
  if (author_ == &::google::protobuf::internal::kEmptyString) {
    author_ = new ::std::string;
  }
  author_->assign(value);
}
inline void LectureDescription::set_author(const char* value, size_t size) {
  set_has_author();
  if (author_ == &::google::protobuf::internal::kEmptyString) {
    author_ = new ::std::string;
  }
  author_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LectureDescription::mutable_author() {
  set_has_author();
  if (author_ == &::google::protobuf::internal::kEmptyString) {
    author_ = new ::std::string;
  }
  return author_;
}
inline ::std::string* LectureDescription::release_author() {
  clear_has_author();
  if (author_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = author_;
    author_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint64 pub_tm = 5;
inline bool LectureDescription::has_pub_tm() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LectureDescription::set_has_pub_tm() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LectureDescription::clear_has_pub_tm() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LectureDescription::clear_pub_tm() {
  pub_tm_ = GOOGLE_ULONGLONG(0);
  clear_has_pub_tm();
}
inline ::google::protobuf::uint64 LectureDescription::pub_tm() const {
  return pub_tm_;
}
inline void LectureDescription::set_pub_tm(::google::protobuf::uint64 value) {
  set_has_pub_tm();
  pub_tm_ = value;
}

// required uint64 update_tm = 6;
inline bool LectureDescription::has_update_tm() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LectureDescription::set_has_update_tm() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LectureDescription::clear_has_update_tm() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LectureDescription::clear_update_tm() {
  update_tm_ = GOOGLE_ULONGLONG(0);
  clear_has_update_tm();
}
inline ::google::protobuf::uint64 LectureDescription::update_tm() const {
  return update_tm_;
}
inline void LectureDescription::set_update_tm(::google::protobuf::uint64 value) {
  set_has_update_tm();
  update_tm_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace page
}  // namespace com
}  // namespace jungle

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jungle::com::page::CommonID_field_t>() {
  return ::jungle::com::page::CommonID_field_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jungle::com::page::JobDescription_job_type_t>() {
  return ::jungle::com::page::JobDescription_job_type_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jungle::com::page::LectureDescription_lecture_type_t>() {
  return ::jungle::com::page::LectureDescription_lecture_type_t_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_page_2eproto__INCLUDED
